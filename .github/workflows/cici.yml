name: cici

on: workflow_dispatch
#on:
#  release:
#    types: [published]
#    branches:
#      - 'releases/**'

env:
  GIT_COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  GIT_COMMIT_TIMESTAMP: ${{ github.event.repository.updated_at}}

jobs:
  emulated-measure:
      environment: tee
      runs-on: [self-hosted, linux]
      needs: [ update-reverse-proxy ]
      container:
        image: notaryserverbuilds.azurecr.io/prod/gramine
        credentials:
          username: notaryserverbuilds
          password: ${{ secrets.AZURE_CR_BUILDS_PW }}
        env:
          GIT_COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
        volumes:
         - /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket
       # mrenclave should be same emulated => so we revoke access to hw
       # options: "--device /dev/sgx_enclave"
      steps:
        - name: get code
          uses: actions/checkout@v4
          with:
            repository: tlsnotary/tlsn
            ref: quote-presentation
        - name: sccache
          if: github.event_name != 'release'
          # && github.event_name != 'workflow_dispatch'
          uses: mozilla-actions/sccache-action@v0.0.6
        - name: set rust env for scc
          if: github.event_name != 'release'
          # && github.event_name != 'workflow_dispatch'
          run: |
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        - name: get emu measurement
          working-directory: ${{ github.workspace }}/crates/notary/server/fixture/tee
          run: |
             curl https://sh.rustup.rs -sSf | sh -s -- -y
             . "$HOME/.cargo/env"
             apt install libssl-dev
             gramine-sgx-gen-private-key
             make
             gramine-sgx-sign -m notary-server.manifest -o notary-server.sgx
             mr_enclave=$(gramine-sgx-sigstruct-view --verbose --output-format=json notary-server.sig |jq .mr_enclave)    
             echo "mrenclave=$mr_enclave" >> "$GITHUB_OUTPUT"
             echo "#### sgx mrenclave" | tee >> $GITHUB_STEP_SUMMARY
             echo "\`\`\`${mr_enclave}\`\`\`" | tee >> $GITHUB_STEP_SUMMARY

        - name: get quote from notary
          working-directory: ${{ github.workspace }}/crates/notary/server/fixture/tee
          id: attestation
          run: |
               SGX=1 make
               gramine-sgx-sign -m notary-server.manifest -o notary-server.sgx
               : # set up the fs like the hosted notary docker container:
               mkdir config && cp config.yaml config && mkdir /tee && cp -R ../tee/* /tee/ && cd /tee && 
               : # invoke gramine-direct to emulate 
               gramine-direct notary-server &
               sleep 5
               quote=$(curl 127.0.0.1:7047/info | jq .quote.rawQuote)
               echo $quote
               echo "quote=$quote" >> $GITHUB_OUTPUT
               echo "#### ðŸ”’ signed quote ${quote}" | tee >> $GITHUB_STEP_SUMMARY
               echo "${quote}" | tee >> $GITHUB_STEP_SUMMARY

     
  hw-measure:
      environment: tee
      runs-on: [self-hosted, linux]
      needs: [ update-reverse-proxy ]
      container:
        image: notaryserverbuilds.azurecr.io/prod/gramine
        credentials:
          username: notaryserverbuilds
          password: ${{ secrets.AZURE_CR_BUILDS_PW }}
        env:
          GIT_COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
        volumes:
         - /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket
        options: "--device /dev/sgx_enclave"
      steps:
        - name: get code
          uses: actions/checkout@v4
          with:
            repository: tlsnotary/tlsn
            ref: quote-presentation
        - name: sccache
          if: github.event_name != 'release'
          # && github.event_name != 'workflow_dispatch'
          uses: mozilla-actions/sccache-action@v0.0.6
        - name: set rust env for scc
          if: github.event_name != 'release'
          # && github.event_name != 'workflow_dispatch'
          run: |
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        - name: reverse proxy port
          run: echo "${{needs.update-reverse-proxy.outputs.teeport}}" | tee >> $GITHUB_STEP_SUMMARY

        - name: get measurement
          working-directory: ${{ github.workspace }}/crates/notary/server/fixture/tee
          run: |
             curl https://sh.rustup.rs -sSf | sh -s -- -y
             . "$HOME/.cargo/env"
             apt install libssl-dev
             gramine-sgx-gen-private-key
             make
             gramine-sgx-sign -m notary-server.manifest -o notary-server.sgx
             mr_enclave=$(gramine-sgx-sigstruct-view --verbose --output-format=json notary-server.sig |jq .mr_enclave)    
             echo "mrenclave=$mr_enclave" >> "$GITHUB_OUTPUT"
             echo "#### sgx mrenclave" | tee >> $GITHUB_STEP_SUMMARY
             echo "\`\`\`${mr_enclave}\`\`\`" | tee >> $GITHUB_STEP_SUMMARY

        - name: get quote from notary
          working-directory: ${{ github.workspace }}/crates/notary/server/fixture/tee
          id: attestation
          run: |
               SGX=1 make
               gramine-sgx-sign -m notary-server.manifest -o notary-server.sgx
               : # set up the fs like the hosted notary docker container:
               mkdir config && cp config.yaml config && mkdir /tee && cp -R ../tee/* /tee/ && cd /tee && 
               : # invoke sgx (use gramine-direct to emulate sgx hardware):
               gramine-sgx notary-server &
               sleep 5
               quote=$(curl 127.0.0.1:7047/info | jq .quote.rawQuote)
               echo $quote
               echo "quote=$quote" >> $GITHUB_OUTPUT
               echo "#### ðŸ”’ signed quote ${quote}" | tee >> $GITHUB_STEP_SUMMARY
               echo "${quote}" | tee >> $GITHUB_STEP_SUMMARY

     
